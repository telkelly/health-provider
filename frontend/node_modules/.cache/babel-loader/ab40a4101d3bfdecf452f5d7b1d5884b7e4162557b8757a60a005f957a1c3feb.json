{"ast":null,"code":"var _jsxFileName = \"/Users/kelly/Documents/health-provider/src/components/GoogleMaps.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport GoogleMapReact from 'google-map-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleMap = () => {\n  _s();\n  const [hospital, setHospital] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(`https://maps.googleapis.com/maps/api/place/details/json?place_id=PLACE_ID&fields=name,geometry&key=YOUR_API_KEY`);\n        setHospital(response.data.result);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // This example adds a search box to a map, using the Google Place Autocomplete\n  // feature. People can enter geographical searches. The search box will return a\n  // pick list containing a mix of places and predicted search terms.\n  // This example requires the Places library. Include the libraries=places\n  // parameter when you first load the API. For example:\n  // <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">\n  function initAutocomplete() {\n    const map = new google.maps.Map(document.getElementById(\"map\"), {\n      center: {\n        lat: -33.8688,\n        lng: 151.2195\n      },\n      zoom: 13,\n      mapTypeId: \"roadmap\"\n    });\n    // Create the search box and link it to the UI element.\n    const input = document.getElementById(\"pac-input\");\n    const searchBox = new google.maps.places.SearchBox(input);\n    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n    // Bias the SearchBox results towards current map's viewport.\n    map.addListener(\"bounds_changed\", () => {\n      searchBox.setBounds(map.getBounds());\n    });\n    let markers = [];\n\n    // Listen for the event fired when the user selects a prediction and retrieve\n    // more details for that place.\n    searchBox.addListener(\"places_changed\", () => {\n      const places = searchBox.getPlaces();\n      if (places.length == 0) {\n        return;\n      }\n\n      // Clear out the old markers.\n      markers.forEach(marker => {\n        marker.setMap(null);\n      });\n      markers = [];\n\n      // For each place, get the icon, name and location.\n      const bounds = new google.maps.LatLngBounds();\n      places.forEach(place => {\n        if (!place.geometry || !place.geometry.location) {\n          console.log(\"Returned place contains no geometry\");\n          return;\n        }\n        const icon = {\n          url: place.icon,\n          size: new google.maps.Size(71, 71),\n          origin: new google.maps.Point(0, 0),\n          anchor: new google.maps.Point(17, 34),\n          scaledSize: new google.maps.Size(25, 25)\n        };\n\n        // Create a marker for each place.\n        markers.push(new google.maps.Marker({\n          map,\n          icon,\n          title: place.name,\n          position: place.geometry.location\n        }));\n        if (place.geometry.viewport) {\n          // Only geocodes have viewport.\n          bounds.union(place.geometry.viewport);\n        } else {\n          bounds.extend(place.geometry.location);\n        }\n      });\n      map.fitBounds(bounds);\n    });\n  }\n  window.initAutocomplete = initAutocomplete;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"400px\",\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: \"AIzaSyCjRBEiBB5qHoY10iZoJ8KA4UH9fvH8V-0\"\n      },\n      defaultCenter: hospital ? {\n        lat: hospital.geometry.location.lat,\n        lng: hospital.geometry.location.lng\n      } : {\n        lat: 0,\n        lng: 0\n      },\n      defaultZoom: 13,\n      children: hospital && /*#__PURE__*/_jsxDEV(\"div\", {\n        lat: hospital.geometry.location.lat,\n        lng: hospital.geometry.location.lng,\n        style: {\n          height: \"10px\",\n          width: \"10px\",\n          backgroundColor: \"red\",\n          borderRadius: \"50%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleMap, \"Enj3Bsgf6H1xtZn6nCzH+mzebpA=\");\n_c = GoogleMap;\nexport default GoogleMap;\nvar _c;\n$RefreshReg$(_c, \"GoogleMap\");","map":{"version":3,"names":["React","useEffect","useState","axios","GoogleMapReact","jsxDEV","_jsxDEV","GoogleMap","_s","hospital","setHospital","fetchData","response","get","data","result","error","console","log","initAutocomplete","map","google","maps","Map","document","getElementById","center","lat","lng","zoom","mapTypeId","input","searchBox","places","SearchBox","controls","ControlPosition","TOP_LEFT","push","addListener","setBounds","getBounds","markers","getPlaces","length","forEach","marker","setMap","bounds","LatLngBounds","place","geometry","location","icon","url","size","Size","origin","Point","anchor","scaledSize","Marker","title","name","position","viewport","union","extend","fitBounds","window","style","height","width","children","bootstrapURLKeys","key","defaultCenter","defaultZoom","backgroundColor","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kelly/Documents/health-provider/src/components/GoogleMaps.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport GoogleMapReact from 'google-map-react';\n\nconst GoogleMap = () => {\n  const [hospital, setHospital] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(\n          `https://maps.googleapis.com/maps/api/place/details/json?place_id=PLACE_ID&fields=name,geometry&key=YOUR_API_KEY`\n        );\n        setHospital(response.data.result);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // This example adds a search box to a map, using the Google Place Autocomplete\n  // feature. People can enter geographical searches. The search box will return a\n  // pick list containing a mix of places and predicted search terms.\n  // This example requires the Places library. Include the libraries=places\n  // parameter when you first load the API. For example:\n  // <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">\n  function initAutocomplete() {\n    const map = new google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat: -33.8688, lng: 151.2195 },\n      zoom: 13,\n      mapTypeId: \"roadmap\",\n    });\n    // Create the search box and link it to the UI element.\n    const input = document.getElementById(\"pac-input\");\n    const searchBox = new google.maps.places.SearchBox(input);\n\n    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n    // Bias the SearchBox results towards current map's viewport.\n    map.addListener(\"bounds_changed\", () => {\n      searchBox.setBounds(map.getBounds());\n    });\n\n    let markers = [];\n\n    // Listen for the event fired when the user selects a prediction and retrieve\n    // more details for that place.\n    searchBox.addListener(\"places_changed\", () => {\n      const places = searchBox.getPlaces();\n\n      if (places.length == 0) {\n        return;\n      }\n\n      // Clear out the old markers.\n      markers.forEach((marker) => {\n        marker.setMap(null);\n      });\n      markers = [];\n\n      // For each place, get the icon, name and location.\n      const bounds = new google.maps.LatLngBounds();\n\n      places.forEach((place) => {\n        if (!place.geometry || !place.geometry.location) {\n          console.log(\"Returned place contains no geometry\");\n          return;\n        }\n\n        const icon = {\n          url: place.icon,\n          size: new google.maps.Size(71, 71),\n          origin: new google.maps.Point(0, 0),\n          anchor: new google.maps.Point(17, 34),\n          scaledSize: new google.maps.Size(25, 25),\n        };\n\n        // Create a marker for each place.\n        markers.push(\n          new google.maps.Marker({\n            map,\n            icon,\n            title: place.name,\n            position: place.geometry.location,\n          })\n        );\n        if (place.geometry.viewport) {\n          // Only geocodes have viewport.\n          bounds.union(place.geometry.viewport);\n        } else {\n          bounds.extend(place.geometry.location);\n        }\n      });\n      map.fitBounds(bounds);\n    });\n  }\n\n  window.initAutocomplete = initAutocomplete;\n\n  return (\n    <div style={{ height: \"400px\", width: \"100%\" }}>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: \"AIzaSyCjRBEiBB5qHoY10iZoJ8KA4UH9fvH8V-0\" }}\n        defaultCenter={\n          hospital\n            ? {\n                lat: hospital.geometry.location.lat,\n                lng: hospital.geometry.location.lng,\n              }\n            : { lat: 0, lng: 0 }\n        }\n        defaultZoom={13}\n      >\n        {hospital && (\n          <div\n            lat={hospital.geometry.location.lat}\n            lng={hospital.geometry.location.lng}\n            style={{\n              height: \"10px\",\n              width: \"10px\",\n              backgroundColor: \"red\",\n              borderRadius: \"50%\",\n            }}\n          />\n        )}\n      </GoogleMapReact>\n    </div>\n  );\n};\n\nexport default GoogleMap;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAC7B,iHACH,CAAC;QACDH,WAAW,CAACE,QAAQ,CAACE,IAAI,CAACC,MAAM,CAAC;MACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB;IACF,CAAC;IAEDL,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;EACA;EACA;EACA,SAASQ,gBAAgBA,CAAA,EAAG;IAC1B,MAAMC,GAAG,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC,EAAE;MAC9DC,MAAM,EAAE;QAAEC,GAAG,EAAE,CAAC,OAAO;QAAEC,GAAG,EAAE;MAAS,CAAC;MACxCC,IAAI,EAAE,EAAE;MACRC,SAAS,EAAE;IACb,CAAC,CAAC;IACF;IACA,MAAMC,KAAK,GAAGP,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC;IAClD,MAAMO,SAAS,GAAG,IAAIX,MAAM,CAACC,IAAI,CAACW,MAAM,CAACC,SAAS,CAACH,KAAK,CAAC;IAEzDX,GAAG,CAACe,QAAQ,CAACd,MAAM,CAACC,IAAI,CAACc,eAAe,CAACC,QAAQ,CAAC,CAACC,IAAI,CAACP,KAAK,CAAC;IAC9D;IACAX,GAAG,CAACmB,WAAW,CAAC,gBAAgB,EAAE,MAAM;MACtCP,SAAS,CAACQ,SAAS,CAACpB,GAAG,CAACqB,SAAS,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC;IAEF,IAAIC,OAAO,GAAG,EAAE;;IAEhB;IACA;IACAV,SAAS,CAACO,WAAW,CAAC,gBAAgB,EAAE,MAAM;MAC5C,MAAMN,MAAM,GAAGD,SAAS,CAACW,SAAS,CAAC,CAAC;MAEpC,IAAIV,MAAM,CAACW,MAAM,IAAI,CAAC,EAAE;QACtB;MACF;;MAEA;MACAF,OAAO,CAACG,OAAO,CAAEC,MAAM,IAAK;QAC1BA,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;MACrB,CAAC,CAAC;MACFL,OAAO,GAAG,EAAE;;MAEZ;MACA,MAAMM,MAAM,GAAG,IAAI3B,MAAM,CAACC,IAAI,CAAC2B,YAAY,CAAC,CAAC;MAE7ChB,MAAM,CAACY,OAAO,CAAEK,KAAK,IAAK;QACxB,IAAI,CAACA,KAAK,CAACC,QAAQ,IAAI,CAACD,KAAK,CAACC,QAAQ,CAACC,QAAQ,EAAE;UAC/CnC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;UAClD;QACF;QAEA,MAAMmC,IAAI,GAAG;UACXC,GAAG,EAAEJ,KAAK,CAACG,IAAI;UACfE,IAAI,EAAE,IAAIlC,MAAM,CAACC,IAAI,CAACkC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC;UAClCC,MAAM,EAAE,IAAIpC,MAAM,CAACC,IAAI,CAACoC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;UACnCC,MAAM,EAAE,IAAItC,MAAM,CAACC,IAAI,CAACoC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;UACrCE,UAAU,EAAE,IAAIvC,MAAM,CAACC,IAAI,CAACkC,IAAI,CAAC,EAAE,EAAE,EAAE;QACzC,CAAC;;QAED;QACAd,OAAO,CAACJ,IAAI,CACV,IAAIjB,MAAM,CAACC,IAAI,CAACuC,MAAM,CAAC;UACrBzC,GAAG;UACHiC,IAAI;UACJS,KAAK,EAAEZ,KAAK,CAACa,IAAI;UACjBC,QAAQ,EAAEd,KAAK,CAACC,QAAQ,CAACC;QAC3B,CAAC,CACH,CAAC;QACD,IAAIF,KAAK,CAACC,QAAQ,CAACc,QAAQ,EAAE;UAC3B;UACAjB,MAAM,CAACkB,KAAK,CAAChB,KAAK,CAACC,QAAQ,CAACc,QAAQ,CAAC;QACvC,CAAC,MAAM;UACLjB,MAAM,CAACmB,MAAM,CAACjB,KAAK,CAACC,QAAQ,CAACC,QAAQ,CAAC;QACxC;MACF,CAAC,CAAC;MACFhC,GAAG,CAACgD,SAAS,CAACpB,MAAM,CAAC;IACvB,CAAC,CAAC;EACJ;EAEAqB,MAAM,CAAClD,gBAAgB,GAAGA,gBAAgB;EAE1C,oBACEb,OAAA;IAAKgE,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,eAC7CnE,OAAA,CAACF,cAAc;MACbsE,gBAAgB,EAAE;QAAEC,GAAG,EAAE;MAA0C,CAAE;MACrEC,aAAa,EACXnE,QAAQ,GACJ;QACEkB,GAAG,EAAElB,QAAQ,CAAC0C,QAAQ,CAACC,QAAQ,CAACzB,GAAG;QACnCC,GAAG,EAAEnB,QAAQ,CAAC0C,QAAQ,CAACC,QAAQ,CAACxB;MAClC,CAAC,GACD;QAAED,GAAG,EAAE,CAAC;QAAEC,GAAG,EAAE;MAAE,CACtB;MACDiD,WAAW,EAAE,EAAG;MAAAJ,QAAA,EAEfhE,QAAQ,iBACPH,OAAA;QACEqB,GAAG,EAAElB,QAAQ,CAAC0C,QAAQ,CAACC,QAAQ,CAACzB,GAAI;QACpCC,GAAG,EAAEnB,QAAQ,CAAC0C,QAAQ,CAACC,QAAQ,CAACxB,GAAI;QACpC0C,KAAK,EAAE;UACLC,MAAM,EAAE,MAAM;UACdC,KAAK,EAAE,MAAM;UACbM,eAAe,EAAE,KAAK;UACtBC,YAAY,EAAE;QAChB;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACa;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEV,CAAC;AAAC3E,EAAA,CA7HID,SAAS;AAAA6E,EAAA,GAAT7E,SAAS;AA+Hf,eAAeA,SAAS;AAAC,IAAA6E,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}