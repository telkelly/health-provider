{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, numbers, strings } from './constants';\nvar MDCTopAppBarBaseFoundation = /** @class */function (_super) {\n  __extends(MDCTopAppBarBaseFoundation, _super);\n  /* istanbul ignore next: optional argument is not a branch statement */\n  function MDCTopAppBarBaseFoundation(adapter) {\n    return _super.call(this, __assign(__assign({}, MDCTopAppBarBaseFoundation.defaultAdapter), adapter)) || this;\n  }\n  Object.defineProperty(MDCTopAppBarBaseFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTopAppBarBaseFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTopAppBarBaseFoundation, \"numbers\", {\n    get: function () {\n      return numbers;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTopAppBarBaseFoundation, \"defaultAdapter\", {\n    /**\n     * See {@link MDCTopAppBarAdapter} for typing information on parameters and return types.\n     */\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        hasClass: function () {\n          return false;\n        },\n        setStyle: function () {\n          return undefined;\n        },\n        getTopAppBarHeight: function () {\n          return 0;\n        },\n        notifyNavigationIconClicked: function () {\n          return undefined;\n        },\n        getViewportScrollY: function () {\n          return 0;\n        },\n        getTotalActionItems: function () {\n          return 0;\n        }\n      };\n      // tslint:enable:object-literal-sort-keys\n    },\n\n    enumerable: false,\n    configurable: true\n  });\n  /** Other variants of TopAppBar foundation overrides this method */\n  MDCTopAppBarBaseFoundation.prototype.handleTargetScroll = function () {}; // tslint:disable-line:no-empty\n  /** Other variants of TopAppBar foundation overrides this method */\n  MDCTopAppBarBaseFoundation.prototype.handleWindowResize = function () {}; // tslint:disable-line:no-empty\n  MDCTopAppBarBaseFoundation.prototype.handleNavigationClick = function () {\n    this.adapter.notifyNavigationIconClicked();\n  };\n  return MDCTopAppBarBaseFoundation;\n}(MDCFoundation);\nexport { MDCTopAppBarBaseFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCTopAppBarBaseFoundation;","map":{"version":3,"names":["MDCFoundation","cssClasses","numbers","strings","MDCTopAppBarBaseFoundation","_super","__extends","adapter","call","__assign","defaultAdapter","Object","defineProperty","get","addClass","undefined","removeClass","hasClass","setStyle","getTopAppBarHeight","notifyNavigationIconClicked","getViewportScrollY","getTotalActionItems","prototype","handleTargetScroll","handleWindowResize","handleNavigationClick"],"sources":["foundation.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAQA,aAAa,QAAO,2BAA2B;AAEvD,SAAQC,UAAU,EAAEC,OAAO,EAAEC,OAAO,QAAO,aAAa;AAExD,IAAAC,0BAAA,0BAAAC,MAAA;EAAgDC,SAAA,CAAAF,0BAAA,EAAAC,MAAA;EA+B9C;EACA,SAAAD,2BAAYG,OAAsC;WAChDF,MAAA,CAAAG,IAAA,OAAAC,QAAA,CAAAA,QAAA,KAAUL,0BAA0B,CAACM,cAAc,GAAKH,OAAO,EAAE;EACnE;EAjCAI,MAAA,CAAAC,cAAA,CAAoBR,0BAAA,WAAO;SAA3B,SAAAS,CAAA;MACE,OAAOV,OAAO;IAChB,CAAC;;;;EAEDQ,MAAA,CAAAC,cAAA,CAAoBR,0BAAA,cAAU;SAA9B,SAAAS,CAAA;MACE,OAAOZ,UAAU;IACnB,CAAC;;;;EAEDU,MAAA,CAAAC,cAAA,CAAoBR,0BAAA,WAAO;SAA3B,SAAAS,CAAA;MACE,OAAOX,OAAO;IAChB,CAAC;;;;EAKDS,MAAA,CAAAC,cAAA,CAAoBR,0BAAA,kBAAc;IAHlC;;;SAGA,SAAAS,CAAA;MACE;MACA,OAAO;QACLC,QAAQ,EAAE,SAAAA,CAAA;UAAM,OAAAC,SAAS;QAAT,CAAS;QACzBC,WAAW,EAAE,SAAAA,CAAA;UAAM,OAAAD,SAAS;QAAT,CAAS;QAC5BE,QAAQ,EAAE,SAAAA,CAAA;UAAM,YAAK;QAAL,CAAK;QACrBC,QAAQ,EAAE,SAAAA,CAAA;UAAM,OAAAH,SAAS;QAAT,CAAS;QACzBI,kBAAkB,EAAE,SAAAA,CAAA;UAAM,QAAC;QAAD,CAAC;QAC3BC,2BAA2B,EAAE,SAAAA,CAAA;UAAM,OAAAL,SAAS;QAAT,CAAS;QAC5CM,kBAAkB,EAAE,SAAAA,CAAA;UAAM,QAAC;QAAD,CAAC;QAC3BC,mBAAmB,EAAE,SAAAA,CAAA;UAAM,QAAC;QAAD;OAC5B;MACD;IACF,CAAC;;;;;EAOD;EACAlB,0BAAA,CAAAmB,SAAA,CAAAC,kBAAkB,GAAlB,aAAsB,CAAC,EAAC;EACxB;EACApB,0BAAA,CAAAmB,SAAA,CAAAE,kBAAkB,GAAlB,aAAsB,CAAC,EAAC;EAExBrB,0BAAA,CAAAmB,SAAA,CAAAG,qBAAqB,GAArB;IACE,IAAI,CAACnB,OAAO,CAACa,2BAA2B,EAAE;EAC5C,CAAC;EACH,OAAAhB,0BAAC;AAAD,CAAC,CA5C+CJ,aAAa;;AA8C7D;AACA,eAAeI,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}